import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode
from database import init_db, async_session
from services import EquipmentService, UserService
from models import SearchRequest
from config import Config
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class EquipmentBot:
    def __init__(self):
        self.application = Application.builder().token(Config.BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("search", self.search_command))
        self.application.add_handler(CommandHandler("categories", self.categories_command))
        self.application.add_handler(CommandHandler("admin", self.admin_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as db:
            user_service = UserService(db)
            await user_service.get_or_create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
        
        welcome_text = f"""
üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/search - –ü–æ–∏—Å–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
/categories - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∏ —è –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!
        """
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", callback_data="search")],
            [InlineKeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîç **–ü–æ–∏—Å–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search –¥–ª—è –ø–æ–∏—Å–∫–∞
‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
‚Ä¢ –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±—Ä–µ–Ω–¥, –º–æ–¥–µ–ª—å, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –Ω–æ—É—Ç–±—É–∫–∏
‚Ä¢ –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
‚Ä¢ –°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ü—Ä–∏–Ω—Ç–µ—Ä—ã –∏ –ú–§–£
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—ã –∏ –¥–∏—Å–ø–ª–µ–∏
‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ
‚Ä¢ –ü–µ—Ä–∏—Ñ–µ—Ä–∏—è
‚Ä¢ –î—Ä—É–≥–æ–µ

üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "iPhone 15"
‚Ä¢ "–Ω–æ—É—Ç–±—É–∫ Dell"
‚Ä¢ "–ø—Ä–∏–Ω—Ç–µ—Ä HP"
‚Ä¢ "–º–æ–Ω–∏—Ç–æ—Ä 24 –¥—é–π–º–∞"
‚Ä¢ "—Å–µ—Ä–≤–µ—Ä Dell PowerEdge"

‚öôÔ∏è **–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã** (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤):
‚Ä¢ /admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        query = " ".join(context.args) if context.args else ""
        
        if not query:
            await update.message.reply_text(
                "üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä: /search iPhone 15"
            )
            return
        
        await self.perform_search(update, context, query)
    
    async def categories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories"""
        keyboard = []
        for category in Config.EQUIPMENT_CATEGORIES:
            keyboard.append([InlineKeyboardButton(
                f"üìÇ {category}", 
                callback_data=f"category_{category}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        async with async_session() as db:
            user_service = UserService(db)
            is_admin = await user_service.is_admin(user_id)
        
        if not is_admin and user_id != Config.ADMIN_USER_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", callback_data="admin_add")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üåê –í–µ–±-–ø–∞–Ω–µ–ª—å", callback_data="admin_web")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=reply_markup
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        query = update.message.text.strip()
        await self.perform_search(update, context, query)
    
    async def perform_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        async with async_session() as db:
            equipment_service = EquipmentService(db)
            search_request = SearchRequest(query=query)
            results = await equipment_service.search_equipment(search_request, limit=10)
        
        if not results:
            await update.message.reply_text(
                f"üòî –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if len(results) == 1:
            await self.send_equipment_details(update, results[0])
        else:
            await self.send_search_results(update, results, query)
    
    async def send_search_results(self, update: Update, results, query: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        text = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
        
        keyboard = []
        for i, equipment in enumerate(results[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            price_text = f"{equipment.price:,.0f} {equipment.currency}"
            text += f"{i+1}. **{equipment.name}**\n"
            text += f"   üí∞ {price_text}\n"
            if equipment.brand:
                text += f"   üè∑Ô∏è {equipment.brand}"
                if equipment.model:
                    text += f" {equipment.model}"
                text += "\n"
            text += f"   üìÇ {equipment.category}\n\n"
            
            keyboard.append([InlineKeyboardButton(
                f"{i+1}. {equipment.name[:30]}...",
                callback_data=f"equipment_{equipment.id}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    
    async def send_equipment_details(self, update: Update, equipment):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏"""
        text = f"üîß **{equipment.name}**\n\n"
        
        price_text = f"{equipment.price:,.0f} {equipment.currency}"
        text += f"üí∞ **–¶–µ–Ω–∞:** {price_text}\n"
        text += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {equipment.category}\n"
        
        if equipment.brand:
            text += f"üè∑Ô∏è **–ë—Ä–µ–Ω–¥:** {equipment.brand}\n"
        if equipment.model:
            text += f"üì± **–ú–æ–¥–µ–ª—å:** {equipment.model}\n"
        
        if equipment.description:
            text += f"\nüìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{equipment.description}\n"
        
        if equipment.specifications:
            try:
                specs = json.loads(equipment.specifications)
                if specs:
                    text += "\n‚öôÔ∏è **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n"
                    for key, value in specs.items():
                        text += f"‚Ä¢ {key}: {value}\n"
            except:
                pass
        
        availability = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if equipment.availability else "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        text += f"\nüì¶ **–ù–∞–ª–∏—á–∏–µ:** {availability}"
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö", callback_data=f"similar_{equipment.id}")],
            [InlineKeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data=f"category_{equipment.category}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "search":
            await query.edit_message_text(
                "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
            )
        elif data == "categories":
            await self.categories_command(update, context)
        elif data == "help":
            await self.help_command(update, context)
        elif data.startswith("equipment_"):
            equipment_id = int(data.split("_")[1])
            await self.show_equipment_details(query, equipment_id)
        elif data.startswith("category_"):
            category = data.split("_", 1)[1]
            await self.show_category_equipment(query, category)
        elif data.startswith("admin_"):
            await self.handle_admin_callback(query, data)
    
    async def show_equipment_details(self, query, equipment_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
        async with async_session() as db:
            equipment_service = EquipmentService(db)
            equipment = await equipment_service.get_equipment(equipment_id)
        
        if not equipment:
            await query.edit_message_text("‚ùå –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π update –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        update = Update(update_id=0, message=query.message)
        await self.send_equipment_details(update, equipment)
    
    async def show_category_equipment(self, query, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        async with async_session() as db:
            equipment_service = EquipmentService(db)
            search_request = SearchRequest(category=category)
            results = await equipment_service.search_equipment(search_request, limit=10)
        
        if not results:
            await query.edit_message_text(f"üòî –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.")
            return
        
        text = f"üìÇ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n\n"
        
        keyboard = []
        for i, equipment in enumerate(results[:10]):
            price_text = f"{equipment.price:,.0f} {equipment.currency}"
            text += f"{i+1}. **{equipment.name}** - {price_text}\n"
            
            keyboard.append([InlineKeyboardButton(
                f"{i+1}. {equipment.name[:30]}...",
                callback_data=f"equipment_{equipment.id}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    
    async def handle_admin_callback(self, query, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback'–æ–≤"""
        if data == "admin_add":
            await query.edit_message_text(
                "‚ûï –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                f"http://{Config.ADMIN_PANEL_HOST}:{Config.ADMIN_PANEL_PORT}/admin"
            )
        elif data == "admin_stats":
            await self.show_admin_stats(query)
        elif data == "admin_web":
            await query.edit_message_text(
                f"üåê –í–µ–±-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                f"http://{Config.ADMIN_PANEL_HOST}:{Config.ADMIN_PANEL_PORT}/admin"
            )
    
    async def show_admin_stats(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        async with async_session() as db:
            equipment_service = EquipmentService(db)
            all_equipment = await equipment_service.get_all_equipment()
            categories = await equipment_service.get_categories()
            brands = await equipment_service.get_brands()
        
        total_equipment = len(all_equipment)
        available_equipment = len([e for e in all_equipment if e.availability])
        
        text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**\n\n"
        text += f"üîß –í—Å–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {total_equipment}\n"
        text += f"‚úÖ –í –Ω–∞–ª–∏—á–∏–∏: {available_equipment}\n"
        text += f"‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: {total_equipment - available_equipment}\n"
        text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}\n"
        text += f"üè∑Ô∏è –ë—Ä–µ–Ω–¥–æ–≤: {len(brands)}\n\n"
        
        if categories:
            text += "üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
            for category in categories[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                count = len([e for e in all_equipment if e.category == category])
                text += f"‚Ä¢ {category}: {count}\n"
        
        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        finally:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()

if __name__ == "__main__":
    bot = EquipmentBot()
    asyncio.run(bot.run())

